// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces.go
//
// Generated by this command:
//
//	mockgen -destination=mock_client.go -package=nats -source=./interfaces.go Client,Subscription,ConnInterface
//

// Package nats is a generated GoMock package.
package nats

import (
	context "context"
	reflect "reflect"

	nats "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
	datasource "gofr.dev/pkg/gofr/datasource"
)

// MockconnInterface is a mock of connInterface interface.
type MockconnInterface struct {
	ctrl     *gomock.Controller
	recorder *MockconnInterfaceMockRecorder
}

// MockconnInterfaceMockRecorder is the mock recorder for MockconnInterface.
type MockconnInterfaceMockRecorder struct {
	mock *MockconnInterface
}

// NewMockconnInterface creates a new mock instance.
func NewMockconnInterface(ctrl *gomock.Controller) *MockconnInterface {
	mock := &MockconnInterface{ctrl: ctrl}
	mock.recorder = &MockconnInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockconnInterface) EXPECT() *MockconnInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockconnInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockconnInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockconnInterface)(nil).Close))
}

// NatsConn mocks base method.
func (m *MockconnInterface) NatsConn() *nats.Conn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NatsConn")
	ret0, _ := ret[0].(*nats.Conn)
	return ret0
}

// NatsConn indicates an expected call of NatsConn.
func (mr *MockconnInterfaceMockRecorder) NatsConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NatsConn", reflect.TypeOf((*MockconnInterface)(nil).NatsConn))
}

// Status mocks base method.
func (m *MockconnInterface) Status() nats.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(nats.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockconnInterfaceMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockconnInterface)(nil).Status))
}

// MocknatsConnector is a mock of natsConnector interface.
type MocknatsConnector struct {
	ctrl     *gomock.Controller
	recorder *MocknatsConnectorMockRecorder
}

// MocknatsConnectorMockRecorder is the mock recorder for MocknatsConnector.
type MocknatsConnectorMockRecorder struct {
	mock *MocknatsConnector
}

// NewMocknatsConnector creates a new mock instance.
func NewMocknatsConnector(ctrl *gomock.Controller) *MocknatsConnector {
	mock := &MocknatsConnector{ctrl: ctrl}
	mock.recorder = &MocknatsConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknatsConnector) EXPECT() *MocknatsConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MocknatsConnector) Connect(arg0 string, arg1 ...nats.Option) (connInterface, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Connect", varargs...)
	ret0, _ := ret[0].(connInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MocknatsConnectorMockRecorder) Connect(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MocknatsConnector)(nil).Connect), varargs...)
}

// MockjetStreamCreator is a mock of jetStreamCreator interface.
type MockjetStreamCreator struct {
	ctrl     *gomock.Controller
	recorder *MockjetStreamCreatorMockRecorder
}

// MockjetStreamCreatorMockRecorder is the mock recorder for MockjetStreamCreator.
type MockjetStreamCreatorMockRecorder struct {
	mock *MockjetStreamCreator
}

// NewMockjetStreamCreator creates a new mock instance.
func NewMockjetStreamCreator(ctrl *gomock.Controller) *MockjetStreamCreator {
	mock := &MockjetStreamCreator{ctrl: ctrl}
	mock.recorder = &MockjetStreamCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjetStreamCreator) EXPECT() *MockjetStreamCreatorMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockjetStreamCreator) New(arg0 *nats.Conn) (jetstream.JetStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0)
	ret0, _ := ret[0].(jetstream.JetStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockjetStreamCreatorMockRecorder) New(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockjetStreamCreator)(nil).New), arg0)
}

// MockjetStreamClient is a mock of jetStreamClient interface.
type MockjetStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockjetStreamClientMockRecorder
}

// MockjetStreamClientMockRecorder is the mock recorder for MockjetStreamClient.
type MockjetStreamClientMockRecorder struct {
	mock *MockjetStreamClient
}

// NewMockjetStreamClient creates a new mock instance.
func NewMockjetStreamClient(ctrl *gomock.Controller) *MockjetStreamClient {
	mock := &MockjetStreamClient{ctrl: ctrl}
	mock.recorder = &MockjetStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjetStreamClient) EXPECT() *MockjetStreamClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockjetStreamClient) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockjetStreamClientMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockjetStreamClient)(nil).Close), ctx)
}

// CreateOrUpdateStream mocks base method.
func (m *MockjetStreamClient) CreateOrUpdateStream(ctx context.Context, cfg jetstream.StreamConfig) (jetstream.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateStream", ctx, cfg)
	ret0, _ := ret[0].(jetstream.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateStream indicates an expected call of CreateOrUpdateStream.
func (mr *MockjetStreamClientMockRecorder) CreateOrUpdateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateStream", reflect.TypeOf((*MockjetStreamClient)(nil).CreateOrUpdateStream), ctx, cfg)
}

// CreateStream mocks base method.
func (m *MockjetStreamClient) CreateStream(ctx context.Context, cfg StreamConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockjetStreamClientMockRecorder) CreateStream(ctx, cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockjetStreamClient)(nil).CreateStream), ctx, cfg)
}

// DeleteStream mocks base method.
func (m *MockjetStreamClient) DeleteStream(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockjetStreamClientMockRecorder) DeleteStream(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockjetStreamClient)(nil).DeleteStream), ctx, name)
}

// Health mocks base method.
func (m *MockjetStreamClient) Health() datasource.Health {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health")
	ret0, _ := ret[0].(datasource.Health)
	return ret0
}

// Health indicates an expected call of Health.
func (mr *MockjetStreamClientMockRecorder) Health() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockjetStreamClient)(nil).Health))
}

// Publish mocks base method.
func (m *MockjetStreamClient) Publish(ctx context.Context, subject string, message []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, subject, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockjetStreamClientMockRecorder) Publish(ctx, subject, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockjetStreamClient)(nil).Publish), ctx, subject, message)
}

// Subscribe mocks base method.
func (m *MockjetStreamClient) Subscribe(ctx context.Context, subject string, handler messageHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, subject, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockjetStreamClientMockRecorder) Subscribe(ctx, subject, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockjetStreamClient)(nil).Subscribe), ctx, subject, handler)
}
