// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nats-io/nats.go/jetstream (interfaces: Msg)
//
// Generated by this command:
//
//	mockgen -destination=mock_jetstream_msg.go -package=nats github.com/nats-io/nats.go/jetstream Msg
//

// Package nats is a generated GoMock package.
package nats

import (
	context "context"
	reflect "reflect"
	time "time"

	nats "github.com/nats-io/nats.go"
	jetstream "github.com/nats-io/nats.go/jetstream"
	gomock "go.uber.org/mock/gomock"
)

// MockMsg is a mock of Msg interface.
type MockMsg struct {
	ctrl     *gomock.Controller
	recorder *MockMsgMockRecorder
}

// MockMsgMockRecorder is the mock recorder for MockMsg.
type MockMsgMockRecorder struct {
	mock *MockMsg
}

// NewMockMsg creates a new mock instance.
func NewMockMsg(ctrl *gomock.Controller) *MockMsg {
	mock := &MockMsg{ctrl: ctrl}
	mock.recorder = &MockMsgMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsg) EXPECT() *MockMsgMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockMsg) Ack() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockMsgMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMsg)(nil).Ack))
}

// Data mocks base method.
func (m *MockMsg) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockMsgMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockMsg)(nil).Data))
}

// DoubleAck mocks base method.
func (m *MockMsg) DoubleAck(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoubleAck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoubleAck indicates an expected call of DoubleAck.
func (mr *MockMsgMockRecorder) DoubleAck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoubleAck", reflect.TypeOf((*MockMsg)(nil).DoubleAck), arg0)
}

// Headers mocks base method.
func (m *MockMsg) Headers() nats.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Headers")
	ret0, _ := ret[0].(nats.Header)
	return ret0
}

// Headers indicates an expected call of Headers.
func (mr *MockMsgMockRecorder) Headers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Headers", reflect.TypeOf((*MockMsg)(nil).Headers))
}

// InProgress mocks base method.
func (m *MockMsg) InProgress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InProgress")
	ret0, _ := ret[0].(error)
	return ret0
}

// InProgress indicates an expected call of InProgress.
func (mr *MockMsgMockRecorder) InProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProgress", reflect.TypeOf((*MockMsg)(nil).InProgress))
}

// Metadata mocks base method.
func (m *MockMsg) Metadata() (*jetstream.MsgMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(*jetstream.MsgMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockMsgMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockMsg)(nil).Metadata))
}

// Nak mocks base method.
func (m *MockMsg) Nak() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nak")
	ret0, _ := ret[0].(error)
	return ret0
}

// Nak indicates an expected call of Nak.
func (mr *MockMsgMockRecorder) Nak() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nak", reflect.TypeOf((*MockMsg)(nil).Nak))
}

// NakWithDelay mocks base method.
func (m *MockMsg) NakWithDelay(arg0 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NakWithDelay", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NakWithDelay indicates an expected call of NakWithDelay.
func (mr *MockMsgMockRecorder) NakWithDelay(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NakWithDelay", reflect.TypeOf((*MockMsg)(nil).NakWithDelay), arg0)
}

// Reply mocks base method.
func (m *MockMsg) Reply() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply")
	ret0, _ := ret[0].(string)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockMsgMockRecorder) Reply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockMsg)(nil).Reply))
}

// Subject mocks base method.
func (m *MockMsg) Subject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockMsgMockRecorder) Subject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockMsg)(nil).Subject))
}

// Term mocks base method.
func (m *MockMsg) Term() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Term")
	ret0, _ := ret[0].(error)
	return ret0
}

// Term indicates an expected call of Term.
func (mr *MockMsgMockRecorder) Term() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Term", reflect.TypeOf((*MockMsg)(nil).Term))
}

// TermWithReason mocks base method.
func (m *MockMsg) TermWithReason(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TermWithReason", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TermWithReason indicates an expected call of TermWithReason.
func (mr *MockMsgMockRecorder) TermWithReason(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TermWithReason", reflect.TypeOf((*MockMsg)(nil).TermWithReason), arg0)
}
